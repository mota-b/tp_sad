/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author zexes
 */
import Schema.Data;
import ToolBox.FileManager;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import java.io.File;        
import javax.swing.table.DefaultTableModel;



public class MainFrame extends javax.swing.JFrame {
    
    static ArrayList<Data>  possibilities;
    static ArrayList<Data>  weights;
    static String FileNAme1;
    static String Filename2;
    static int nb_criteres;
    static int nb_possibilities;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MPTable = new javax.swing.JTable();
        chooseMPFile = new javax.swing.JButton();
        ChoosePFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        POIDSTable = new javax.swing.JTable();
        Compute = new javax.swing.JButton();
        sconcordonce = new javax.swing.JLabel();
        MPpath = new javax.swing.JTextField();
        poidsPath = new javax.swing.JTextField();
        AprimText = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Aprime = new javax.swing.JTable();
        SeuilConcordonce = new javax.swing.JTextField();
        details = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MPTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(MPTable);

        chooseMPFile.setText("Choose MP File");
        chooseMPFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMPFileActionPerformed(evt);
            }
        });

        ChoosePFile.setText("Choose Poids File");
        ChoosePFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChoosePFileActionPerformed(evt);
            }
        });

        POIDSTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(POIDSTable);

        Compute.setText("COMPUTE");

        sconcordonce.setText("Pick SC:Seuil de Concodronce:");

        AprimText.setText("A'");

        Aprime.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(Aprime);

        details.setText("Details :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(ChoosePFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(poidsPath))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Compute, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chooseMPFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MPpath, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AprimText, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(details, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sconcordonce)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SeuilConcordonce)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseMPFile)
                    .addComponent(MPpath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AprimText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChoosePFile)
                    .addComponent(poidsPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sconcordonce, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SeuilConcordonce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(details, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(Compute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChoosePFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChoosePFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            poidsPath.setText(selectedFile.getAbsolutePath());
            Filename2 = selectedFile.getAbsolutePath();     
        }
        
    }//GEN-LAST:event_ChoosePFileActionPerformed

    private void chooseMPFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMPFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            MPpath.setText(selectedFile.getAbsolutePath());
            FileNAme1 = selectedFile.getAbsolutePath();
            DefaultTableModel model = (DefaultTableModel)MPTable.getModel();
            for(int i = 0; i < nb_possibilities; i++) {
                String[] row = new String[nb_criteres];

                for(int j = 0; j < nb_criteres; j++) {
                    row[j] = possibilities.get(i).getC(j);
                }

                model.addRow(row);
            }
        }
        
        
        
    }//GEN-LAST:event_chooseMPFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
    
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
        
        // ============================================================================================================
        // 1) Get Data Gloabal
        
        
        possibilities = FileManager.getDataSet(FileNAme1);
        nb_criteres = possibilities.get(0).getNb_c();
        nb_possibilities = Data.obj_count;
        
        Data.obj_count=0;
        weights = FileManager.getDataSet(Filename2);
        
        
        // 2) Matrice de Performances
        String mp[][] = new String[nb_possibilities][nb_criteres];    
        for (int i = 0; i < nb_possibilities; i++) {
            for (int j = 1; j < nb_criteres; j++) {
                mp[i][j] = possibilities.get(i).getC(j);
            }
        }
        
        String[] vw = new String[nb_criteres];
        for (int i = 0; i < nb_criteres; i++) {
            vw[i]= weights.get(i).getC(1);
        }
        
        
        System.out.println("\n[MP]");
        for (int i = 0; i < nb_possibilities; i++) {
            for (int j = 1; j < nb_criteres; j++) {
                System.out.print(mp[i][j]+" | ");
            }
            System.out.println("");
        }
        
        
        // 3) Matrice de Concordance
        String[][] mc = concordance(mp, nb_possibilities, vw);
        
        System.out.println("\n[MC]");
        for (int i = 0; i < nb_possibilities; i++) {
            for (int j = 0; j < nb_possibilities; j++) {
                if(!mc[i][j].equals("-")){
                    DecimalFormat df2 = new DecimalFormat("#.####");
                    System.out.print(df2.format(Double.valueOf(mc[i][j])) +" | ");
                }
                else
                    System.out.print(mc[i][j]+" | ");
            }
            System.out.println("");
        }
        
        
        // 4) Matrice de Surclassement
        double seuil_concord = 0.6;
        String[][] ms = mc;
                    
        for (int i = 0; i < nb_possibilities; i++) {
            for (int j = 0; j < nb_possibilities; j++) {
                if(!mc[i][j].equals("-")){
                    if(Double.valueOf(mc[i][j]) > seuil_concord )
                        ms[i][j] = "1";
                    else
                        ms[i][j] = "0";
                }
            }   
        }
        
        System.out.println("\n[MS]");
        for (int i = 0; i < nb_possibilities; i++) {
            for (int j = 0; j < nb_possibilities; j++) {
                if(!ms[i][j].equals("-")){
                    DecimalFormat df2 = new DecimalFormat("#.####");
                    System.out.print(df2.format(Double.valueOf(ms[i][j])) +" | ");
                }
                else
                    System.out.print(ms[i][j]+" | ");
            }
            System.out.println("");
        }
        
        
        System.out.println("\n[Max]\n"+max_row_matrix(ms));
        
        
        
        // 5) A'
        ArrayList<Integer> indexesV = indexes(ms, max_row_matrix(ms));
        
        System.out.println("\n[A']");
        for(int e : indexesV){
            System.out.print(possibilities.get(e)+ " | ");
            for (int j = 1; j < nb_criteres; j++) {
                System.out.print(mp[e][j]+" | ");
            }
             System.out.println("");       
        }
        

        
        
    }
    
    public static String[][] concordance (String[][] mp, int n, String[] vw){
        String mc[][] = new String[n][n];    
        
        
        double weight_sum = 0;
        for (int i = 0; i < vw.length; i++) {
            weight_sum += Double.valueOf(vw[i]);
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n ; j++) {
                if(i==j)
                    mc[i][j] ="-";
                else
                    mc[i][j] = String.valueOf( sum_weight(mp, vw, i, j)/ weight_sum );
            }
        }
        
        
        return mc;
    }
    
    public static double sum_weight(String[][] mp, String[] vw, int i, int j){
        double sum = 0;
            
        for (int k = 0; k < vw.length-1; k++) {
            if(Double.valueOf(mp[i][k+1])>=Double.valueOf(mp[j][k+1]))
               sum+= Double.valueOf(vw[k]);
        }
        
        return sum;
    }
    
    public static int max_row_matrix(String[][] ms){
        int max = 0;
        int sum;
        for (int i = 0; i < ms.length; i++) {
            sum =0;
            for (int j = 0; j < ms.length ; j++) {
                if(!ms[i][j].equals("-")){
                    sum += Integer.valueOf(ms[i][j]);
                }
                
            }
            if (sum>max)
                max = sum;
        }
        
        return max;
    }
    
    public static ArrayList<Integer> indexes(String[][] ms, int max_row){
        ArrayList<Integer> v = new ArrayList();
        int sum;
        
        for (int i = 0; i < ms.length; i++) {
            sum = 0;
            for (int j = 0; j < ms.length ; j++) {
                if(!ms[i][j].equals("-")){
                    sum += Integer.valueOf(ms[i][j]);
                }
                
            }
            if (sum == max_row)
                v.add(i);
        }
        
        return v;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AprimText;
    private javax.swing.JTable Aprime;
    private javax.swing.JButton ChoosePFile;
    private javax.swing.JButton Compute;
    private javax.swing.JTable MPTable;
    private javax.swing.JTextField MPpath;
    private javax.swing.JTable POIDSTable;
    private javax.swing.JTextField SeuilConcordonce;
    private javax.swing.JButton chooseMPFile;
    private javax.swing.JButton details;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField poidsPath;
    private javax.swing.JLabel sconcordonce;
    // End of variables declaration//GEN-END:variables
}
